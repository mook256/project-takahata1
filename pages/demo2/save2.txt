<template>
    <div>
        <!-- Header -->
        <header class="box-content h-8 w-50 p-4 bg-Slate-50">
            <div class="flex items-center justify-between">
                <a href="#" class="-m-1.5 p-1.5">
                    <img class="h-8 w-auto" src="/image/ex.png" alt="" />
                </a>
                <div class="flex items-center space-x-2">
                    <router-link to="/home/">
                        <button class="rounded-full bg-gray-200 text-gray-800 px-4 py-2">Home</button>
                    </router-link>
                    <a href="https://sites.google.com/view/takahata" target="_blank">
                        <button class="rounded-full bg-gray-200 text-gray-800 px-4 py-2">Shuttle booking</button>
                    </a>
                    <button class="rounded-full bg-gray-200 text-gray-800 px-4 py-2">Notification</button>
                    <router-link to="/">
                        <button class="rounded-full bg-green-500 text-white px-4 py-2">Logout</button>
                    </router-link>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <div class="bg-sky-300 ">
            <main class="container mx-auto py-10 bg-Teal-600">
                <div class="text-center mb-8">
                    <h2 class="text-2xl font-semibold">Report</h2>
                </div>
                <div class="container box-border mx-auto max-w-prose bg-sky-50 ">

                    <div class="mt-10">
                        <!-- Form -->
                        <div class="mt-10 grid grid-cols-1 divide-y ">
                            <fieldset>
                                <legend class="text-sm font-semibold leading-6 text-gray-900">Repot</legend>
                                <div class="mt-6 space-y-6">
                                    <select id="currency" name="currency"
                                        class="h-full rounded-md border-0 bg-transparent py-0 pl-2 pr-7 text-gray-900 sm:text-sm outline outline-offset-2 outline-white-500"
                                        v-model="selectedLevel" required>
                                        <option>IT-Service</option>
                                        <option>IT-Request</option>
                                        <option>Select All</option>
                                    </select>
                                </div>
                            </fieldset>
                        </div>

                        <div class="mt-10 grid grid-cols-1 divide-y ">
                            <fieldset>
                                <legend class="text-sm font-semibold leading-6 text-gray-900">Level</legend>
                                <div class="mt-6 space-y-6">
                                    <select id="currency" name="currency"
                                        class="h-full rounded-md border-0 bg-transparent py-0 pl-2 pr-7 text-gray-900 sm:text-sm outline outline-offset-2 outline-white-500"
                                        v-model="selectedLevel" required>
                                        <option>Not Specified</option>
                                        <option>High</option>
                                        <option>Low</option>
                                        <option>Medium</option>
                                        <option>Normal</option>
                                    </select>
                                </div>
                            </fieldset>
                        </div>

                        <!-- วันที่ -->


                        <div class="date-wrapper">
                            <div class="date-container">
                                <label for="date">เลือกวันที่:</label>
                                <input type="date" v-model="selectedDate">
                            </div>
                            <div class="date-container">
                                <label for="date1">เลือกวันที่:</label>
                                <input type="date" v-model="selectedDate1">
                            </div>


                        </div>

                        <!-- Search Bar -->

                        <!--  -->
                        <!-- click="refreshPage" -->

                        <!-- detail -->



                        <!-- Buttons -->
                        <div class="mt-6">
                            <div class="flex items-center justify-center space-x-2">

                            </div>
                        </div>


                        <!-- Buttons -->
                        <div class="flex items-center justify-center space-x-2 flex-grow">
                            <button @click="showModal = true"
                                class="rounded-full bg-green-500 text-white px-4 py-2">Search</button>
                            <router-link to="/home/">
                                <button class="rounded-full bg-red-600 text-white px-4 py-2">Cancel</button>
                            </router-link>

                        </div>

                        <!-- Modal -->


                        <!-- Buttons -->
                        <div class="mt-6">
                            <div class="flex items-center justify-center space-x-2">

                            </div>
                        </div>

                    </div>
                </div>
            </main>
        </div>
    </div>
</template>

<script setup>
import { ref } from 'vue';
import { jwtDecode } from "jwt-decode";
import { useRouter } from 'vue-router';
import { onMounted, watch } from 'vue';
const ty1 = ref([]);
const ty2 = ref([]);

const selectedTopic = ref();
const selectedIssue = ref();
const selectedLevel = ref();
const detail = ref();
const selectedDate = ref('');
const selectedDate1 = ref('');
onMounted(() => {
    const savedDate = localStorage.getItem('selectedDate');
    if (savedDate) {
        selectedDate.value = savedDate;
    } else {
        // If the page is newly opened, clear sessionStorage
        sessionStorage.removeItem('selectedDate');
    }
});

onMounted(() => {
    const savedDate = localStorage.getItem('selectedDate1');
    if (savedDate) {
        selectedDate1.value = savedDate;
    } else {
        // If the page is newly opened, clear sessionStorage
        sessionStorage.removeItem('selectedDate1');
    }
});

watch(selectedDate, (newDate) => {
    if (newDate) {
        localStorage.setItem('selectedDate', newDate);
    } else {
        localStorage.removeItem('selectedDate');
    }
});

watch(selectedDate1, (newDate) => {
    if (newDate) {
        localStorage.setItem('selectedDate1', newDate);
    } else {
        localStorage.removeItem('selectedDate1');
    }
});

const refreshPage = () => {
    window.location.reload();
};
// 
const token = jwtDecode(useCookie("token").value); // nuxt cookie & jwtDecode nuxt

const fetchData = async () => {
    try {
        const response = await $fetch('http://localhost:8080/api/get/typeRepair', { credentials: 'include' });
        ty1.value = response.results;
    } catch (error) {
        console.error('Failed to fetch Topic type data:', error);
    }
};

const loadIssues = async () => {
    try {
        if (selectedTopic.value) {
            const response = await $fetch('http://localhost:8080/api/get/resource', {
                method: "POST",
                body: { type: selectedTopic.value },
                credentials: 'include'
            });
            ty2.value = response.results;
        }
    } catch (error) {
        console.error('Failed to fetch ty2 data:', error);
    }
};
const loadLevel = async () => {
    try {
        if (selectedTopic.value) {
            const response = await $fetch('http://localhost:8080/api/Level_ServiceController', {
                method: "POST",

                credentials: 'include'
            });
            ty3.value = response.results;
        }
    } catch (error) {
        console.error('Failed to fetch ty3 data:', error);
    }
};

const saveData = async () => {
    try {
        const response = await $fetch('http://localhost:8080/api/IT_Service_data', {
            method: "POST",
            body: {
                en: token.userId,
                name: token.name,
                section_id: token.department,
                branch: token.branch,//
                tel: token.tel,
                service_type: selectedTopic.value,
                catalog_type: selectedIssue.value,
                detail: detail.value,
                status: "Open",
                level: selectedLevel.value,

            },
            credentials: 'include'
        });
        if (response.ok) { // Check if the request was successful
            navigateTo('/home/');
        } else {
            console.error('Submission failed:', response.statusText);
            // Handle failure (maybe show a message to the user)
        }
    } catch (error) {
        console.error('Failed to save data:', error);
        // Handle errors (inform the user)
    }
};

const validateForm = () => {
    if (!detail.value) {

        return false;
    }
    showModal.value = true;
    return true;
};

const handleSubmit = async () => {
    if (validateForm()) {
        navigateTo('/Report_Services/');
        showModal.value = false; // Close the modal
        await saveData(); // Submit the form data
    }

    // Optionally, navigate to another page or show a success message
};

fetchData();
</script>

<style scoped>
.date-wrapper {
    display: flex;
    align-items: center;

}

.date-container {
    margin-right: 7px;
}

.date-container label {
    display: block;
    margin-bottom: 18px;
}

.date-container input {
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.date-container button {
    margin-top: 10px;
    padding: 5px 10px;
    border: none;
    border-radius: 4px;
    background-color: #007bff;
    color: white;
    cursor: pointer;
}
</style>